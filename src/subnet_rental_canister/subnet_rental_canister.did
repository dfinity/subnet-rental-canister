type Event = record { date : nat64; event : EventType };
type EventType = variant {
  RentalRequestCancelled : record { rental_request : RentalRequest };
  PaymentSuccess : record {
    covered_until : nat64;
    cycles : nat;
    amount : Tokens;
  };
  Undegraded;
  LockingSuccess : record { user : principal; cycles : nat; amount : Tokens };
  RentalAgreementTerminated : record {
    initial_proposal_id : nat64;
    user : principal;
    rental_condition_id : RentalConditionId;
    subnet_creation_proposal_id : opt nat64;
  };
  PaymentFailure : record { reason : text };
  RentalRequestCreated : record { rental_request : RentalRequest };
  Degraded;
  RentalConditionsChanged : record {
    rental_condition_id : RentalConditionId;
    rental_conditions : opt RentalConditions;
  };
  LockingFailure : record { user : principal; reason : text };
  Other : record { message : text };
  RentalAgreementCreated : record {
    initial_proposal_id : nat64;
    user : principal;
    rental_condition_id : RentalConditionId;
    subnet_creation_proposal_id : opt nat64;
  };
  RentalRequestFailed : record {
    user : principal;
    proposal_id : nat64;
    reason : text;
  };
  TransferSuccess : record { block_index : nat64; amount : Tokens };
};
type ExecuteProposalError = variant {
  PriceCalculationError : PriceCalculationData;
  SubnetAlreadyRequested;
  SubnetNotRented;
  UserAlreadyRequestingSubnetRental;
  TransferUserToSrcError : text;
  NotifyTopUpError : text;
  CallXRCFailed : text;
  UnauthorizedCaller;
  CallGovernanceFailed;
  SubnetAlreadyRented;
  TransferSrcToCmcError : text;
  InsufficientFunds;
};
type PriceCalculationData = record {
  daily_cost_cycles : nat;
  decimals : nat32;
  initial_rental_period_days : nat64;
  scaled_exchange_rate_xdr_per_icp : nat64;
};
type RentalConditionId = variant { App13CH };
type RentalConditions = record {
  daily_cost_cycles : nat;
  subnet_id : opt principal;
  description : text;
  initial_rental_period_days : nat64;
  billing_period_days : nat64;
};
type RentalRequest = record {
  lock_amount_icp : Tokens;
  initial_proposal_id : nat64;
  user : principal;
  rental_condition_id : RentalConditionId;
  last_locking_time : nat64;
  refundable_icp : Tokens;
  locked_amount_cycles : nat;
  creation_date : nat64;
};
type Result = variant { Ok; Err : ExecuteProposalError };
type Result_1 = variant { Ok : Tokens; Err : text };
type Result_2 = variant { Ok : nat64; Err : text };
type SubnetRentalProposalPayload = record {
  user : principal;
  rental_condition_id : RentalConditionId;
  proposal_id : nat64;
  proposal_creation_time : nat64;
};
type Tokens = record { e8s : nat64 };
service : () -> {
  execute_rental_request_proposal : (SubnetRentalProposalPayload) -> (Result);
  get_history_page : (opt principal, nat64) -> (vec Event) query;
  get_todays_price : (RentalConditionId) -> (Result_1);
  list_rental_conditions : () -> (
      vec record { RentalConditionId; RentalConditions },
    ) query;
  list_rental_requests : () -> (vec RentalRequest) query;
  refund : () -> (Result_2);
}
